param(
  [string]$siteName = ""
  , [string]$appRoot  = ""
  , [string]$zipPath = ""
  , [switch]$BackupOnly
  , [string]$BackupTag = ""
)

##
## Script requirements: 
##  - You need to run this script as Administrator
##  - You need to have Powershell Community Extensions installed (available on codeplex.com)
##  - If on a 64-bit machine, you need to run this from 64-bit version of powershell.exe. Counterintuitively, this means running the powershell found in c:\windows\system32\...\v1.0\powershell.exe. 
##  - The machine needs IIS management stuff installed (Control Panel -> add/remove windows features -> iis)
##
## Examples: 

## 1. Creates a .zip backup of the orchard web files and the SQL Server db, and deploys the updated version of the site from a .zip (which can be generated by the Orchard msbuild script)
## cd \inetpub\wwwroot\
## .\Deploy-OrchardSite.ps1 -siteName "www.myorchardsite.com" -zipPath "www.myorchardsite.com-BUILD-v0.1.2.zip"

## 2. Creates a backup of the orchard web files and SQL Server db, and does nothing else. Backups are stored in Archive\<$siteName-DATE__TIME>\ (relative to current dir)
## cd \inetpub\wwwroot\
## .\Deploy-OrchardSite.ps1 -siteName "www.myorchardsite.com" -BackupOnly

##
## ===========================================================
## FUNCIONS
function Finish-Script() {
    Write-Host ""
    Write-Host "Done!!!"
    Write-Host ""
    Write-Host ""
}

function Set-AppOnline {
    param([string]$appRoot)
    Write-Host ""
    Write-Host "Setting App_online.htm"
    Get-ChildItem $appRoot -Filter App_offline.htm | Rename-Item -NewName App_online.htm 
}
## FUNCIONS
## ===========================================================
##

Import-Module WebAdministration
Import-Module PSCX 
. ".\Backup-OrchardDB.ps1"

$scriptpath = $MyInvocation.MyCommand.Path
$scriptpath = Split-Path $scriptpath 


Write-Host "==================================================="
Write-Host "Deploy-OrchardSite script"

## If $appRoot isn't specified, assume it is same as $siteName: 
if ($siteName -and !($appRoot)) {
    Write-Warning "  No value was specified for the property, `$appRoot. Setting `$appRoot to: $siteName"
    $appRoot = $siteName 
}

## Change  Dir: 
cd $scriptpath
$appRoot = Resolve-Path $appRoot
if (!($BackupOnly)) {
    $zipPath = Resolve-Path $zipPath 
}
Write-Host "  Deployment target path: '$appRoot'"
Write-Host "  ZipPath: '$zipPath'"


## 
## Validate parameters before continuing: 
if (!($siteName)) {
    write-error "  Error! You must specify a value for property `$siteName."
    return 
}
if (!(get-website | where-object { $_.name -eq $siteName })) {
    write-error "  Error! Site, '$siteName' does not exist"
    return 
}
if (!($appRoot) -or !(test-path $appRoot)) {
    write-Error "  Error! Target path (appRoot), '$appRoot' not found."
    return 
}
if (!($BackupOnly)) {
    if (!($zipPath) -or !(test-path $zipPath)) {
        Write-Error "  Error! zip file, '$zipPath' not found."
        return
    }
}

## Set app OFFLINE:
Write-Host "Setting App_offline.htm"
$appOfflineFile = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath("$appRoot\App_offline.htm")
$appOnlineFile = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath("$appRoot\App_online.htm")
if ( !(test-path $appOfflineFile) -and !(test-path $appOnlineFile) ) {
    write-host "Creating file: '$appOnlineFile'"
    new-item $appOnlineFile -type file
}
Get-ChildItem $appRoot -Filter App_online.htm | Rename-Item -NewName App_offline.htm 



##
## Zip existing site
Write-Host ""
$dateStamp = get-date -uformat "%Y-%m-%d__%H-%M-%S"
$archiveRelativeDir = "Archive\$siteName-$dateStamp"
if (!(test-path "Archive")) {
    new-item "Archive" -type directory 
}
if (!(test-path $archiveRelativeDir)) {
    new-item $archiveRelativeDir -type directory 
}
$siteBackupDir = Resolve-Path $archiveRelativeDir
$siteBackupZipFilename = "$siteName-BACKUP-$dateStamp.zip"
$siteBackupZip = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(".\$archiveRelativeDir\$siteBackupZipFilename")
Write-Host "  Archiving existing site ('$appRoot') to $siteBackupZip"
Write-Zip -Path $appRoot -OutputPath $siteBackupZip -IncludeEmptyDirectories -Level 9


##
## Backup Database: 
write-host "  Backing up database"
$dbBackupResult = Backup-OrchardDatabase -siteName $siteName -siteBackupDir $siteBackupDir
if (!($dbBackupResult)) {
    write-error "Failed to backup Orchard DB. Aborting script."
    return
}

## End script here if $BackupOnly option is enabled: 
if ($BackupOnly) {
    write-host "Option `$BackupOnly is specified, ending script soon."
    Set-AppOnline -appRoot $appRoot 
    Finish-Script
    return
}


## 
## Delete old deployment: 
Write-Host ""
Write-Host "  Deleting existing files in '$appRoot' (excluding: App_offline.htm, App_online.htm, App_Data, Media)."
Get-ChildItem $appRoot * -exclude App_offline.htm, App_online.htm, App_Data, Media | Remove-Item -recurse 

## Deploy new code: 
Write-Host ""
Write-Host "  Extracting '$zipPath' to '$appRoot'."
Expand-Archive $zipPath -OutputPath $appRoot -Force


##
## ///TODO: Should have a function that looks through a .zip file or a folder for a list of Orchard recipes, and possibly other custom deploy artifacts, like sql scripts for other tprSchools db. 


Set-AppOnline -appRoot $appRoot 
Finish-Script